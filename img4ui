#!/bin/bash

# Check if ImageMagick is installed
if ! command -v convert &> /dev/null; then
    echo "Error: ImageMagick (convert) is not installed."
    exit 1
fi

# Ensure input file and variable name are provided
if [ $# -lt 2 ]; then
    echo "Usage: $0 <input_file> <variable_name>"
    exit 1
fi

# Input file and variable name setup
INPUT_FILE="$1"
VARIABLE_NAME="$2"
OUTPUT_FILE="${VARIABLE_NAME}.ui"

#what are we dealing with?
identify -verbose $INPUT_FILE

# Reduce colors to 256 with optimized palette
convert $INPUT_FILE -colors 16 -type palette +dither reduced.png
identify reduced.png

# Extract width and height
WIDTH=$(identify -format "%w" reduced.png)
HEIGHT=$(identify -format "%h" reduced.png)

# Begin writing the .ui file
{
    echo "visMoniker ${VARIABLE_NAME} = {"
    echo "    size = standard;"
    echo "    style = icon;"
    echo "    aspectRatio = normal;"
    echo "    color = color4;"
    echo "    cachedSize = $WIDTH, $HEIGHT;"
    echo "    gstring {"
    echo "        GSBeginString"
    echo "        GSDrawBitmapAtCP <(${VARIABLE_NAME}End - ${VARIABLE_NAME}Start)>"
    echo "        ${VARIABLE_NAME}Start	label	byte"
    echo "        CBitmap <<$WIDTH,$HEIGHT,BMC_UNCOMPACTED,BMF_4BIT or mask BMT_PALETTE or mask BMT_COMPLEX>, 0, $HEIGHT, 0, 70, 20, 72, 72>"
    echo "        word    16"
} > "$OUTPUT_FILE"

# Extract and reorder the palette according to actual PNG index, ensure 16 entries
identify -verbose reduced.png | awk '
/Colormap:/ { 
    in_colormap = 1; 
    next 
}
/^  [ ]*[0-9]+:/ && in_colormap {
    # Extract color index and RGB values from the colormap section
    match($0, /[0-9]+: \([^)]+\) #[0-9A-Fa-f]+/, line)
    split(line[0], fields, ": ")
    idx = fields[1]
    color = substr(fields[2], match(fields[2], /#[0-9A-Fa-f]+/)+1, 6)
    r = substr(color, 1, 2)
    g = substr(color, 3, 2)
    b = substr(color, 5, 2)
    palette[idx+1] = sprintf("        RGBValue < 0x%s, 0x%s, 0x%s >", tolower(r), tolower(g), tolower(b))
    max_idx = idx > max_idx ? idx : max_idx
}
END {
    # Output the palette entries, padding with black if less than 16
    for (i = 1; i <= 16; i++) {
        if (i in palette) {
            print palette[i]
        } else {
            print "        RGBValue < 0x00, 0x00, 0x00 >"
        }
    }
}' >> "$OUTPUT_FILE"
identify -verbose reduced.png

# Extract pixel data in 4-bit format
convert reduced.png -depth 8 gray:- | xxd -p -c "$WIDTH" | awk -v width="$WIDTH" '
{
    printf "        db  "
    for (i = 1; i <= length($0); i += 4) {
        # Combine two 4-bit values (nibbles) into a single byte
        high = substr($0, i, 1)    # High nibble
        low = substr($0, i + 2, 1) # Low nibble
        if (low == "") low = "0"   # Handle padding for odd width
        printf "0x%s%s", high, low
        if (i + 3 < length($0)) printf ", "
    }
    printf "\n"
}' >> "$OUTPUT_FILE"

# Add the variable name end label and close the .ui file
{
    echo "        ${VARIABLE_NAME}End    label    byte"
    echo "        GSEndString"
    echo "    }"
    echo "}"
} >> "$OUTPUT_FILE"

# Clean up intermediate files
#rm reduced.png palette.tmp

echo "Conversion complete. Output written to $OUTPUT_FILE."
